#!/bin/bash

# This file wraps the bootstrap processes for the SITCH service.


# Set env vars
source .env

# First, we need to make sure all of our required env vars are set...
set BAIL_NO_ENV="NO"
if [ "${SERVER_NAME}" == "unset" ]; then
  echo "Missing DNS_NAME in .env file!"
  set BAIL_NO_ENV="YES"
fi
if [ "${CERTBOT_EMAIL}" == "unset" ]; then
  echo "Missing EMAIL in .env file!"
  set BAIL_NO_ENV="YES"
fi
if [ "${SLACK_WEBHOOK}" == "unset" ]; then
  echo "Missing SLACK_WEB_HOOK in .env file!"
  set BAIL_NO_ENV="YES"
fi
if [ "${BAIL_NO_ENV}" == "YES" ]; then
  echo "Exiting because of missing env vars!  Check .env file!"
  exit 1
fi


# Next we try to determine the distribution...
if [ -f /etc/lsb-release ]; then
  export `cat /etc/lsb-release | grep DISTRIB_ID | head -1`
elif [ -f /etc/redhat-release ]; then
  export DISTRIB_ID=`cat /etc/redhat-release | head -1 | awk '{print $1}'`
fi

# If we can't determine the distribution, we exit.
if [ -z ${DISTRIB_ID} ]; then
  echo "Unable to determine distribution! Exiting!!"
  exit 1
fi

# We look to see if the distribution is supported.  If not, we exit.
case "${DISTRIB_ID}" in
    Ubuntu)
        echo "Ubuntu found!"
        /bin/bash ./ubuntu/install-docker.sh
        ;;
    Debian)
        echo "Debian found!"
        /bin/bash ./debian/install-docker.sh
        ;;
    *)
        echo "Unsupported OS: ${DISTRIB_ID}! EXITING"
        exit 1
esac

# Install docker-compose...
/bin/bash ./general/install-docker-compose.sh
# Get letsencrypt certs...
/bin/bash ./general/lets-encrypt.sh

# We bring up the stack, knowing that Logstash will be in a restart loop until
# seeded certs are present in Vault.
/usr/local/bin/docker-compose up -d
echo "Sleep for 30s, give Vault time to go live."
sleep 30
docker ps -a
docker logs sitch_vault
echo "---LISTENING SERVICES---"
netstat -putan | grep LISTEN
echo "-------"
# Requires copying Vault keys and root token, then pasting 3 keys back

/bin/bash ./general/vault.sh

sleep 5
# Vault root token will needed for this script and for docker-compose
# echo Paste the root token generated by Vault
# read VAULT_TOKEN
# export VAULT_TOKEN
/bin/bash ./general/logstash.sh

export VAULT_TOKEN=`cat ./vault_root_token | head -1 | tail -1`

if [ "${VAULT_TOKEN}" == "" ]; then
  echo "Unable to get vault token! \nTearing down environment, check your config and start again."
  docker-compose down
  exit 1
fi

# Now we docker-compose up with new env var for vault access.
docker-compose up -d

sleep 10

docker ps
echo "Build script is complete.  Please confirm that service is live by visiting the Kibana dashboard."
